package main;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.Timer;

/**
 * Author: Eduardo y Marc
 */
class info extends JPanel implements ActionListener {

    private static final long serialVersionUID = 2242406387998512165L;

    JButton salirButton;
    JPanel buttonPanel;
    JScrollPane scrollPane;
    JLabel informacionLabel;
    JLabel tituloLabel;
    Font customFont;
    Map<JButton, Integer> underlineProgress = new HashMap<>();
    Map<JButton, Timer> underlineTimers = new HashMap<>();
    Set<JButton> clickedButtons = new HashSet<>();
    
    @SuppressWarnings("serial")
	info() {
        setLayout(new BorderLayout());
        
        buttonPanel = new JPanel(new GridLayout(0, 1));
        buttonPanel.setBackground(Color.black);
        
        addButton("START");
        addButton("CITY");
        addButton("GAMES");
        addButton("PLAYER");
        addButton("RESEARCH");
        addButton("VACCINE");
        addButton("HEAL");
        addButton("END");
        addButton("MENU");

        tituloLabel = new JLabel("INFORMATION");
        tituloLabel.setFont(fuentecargar(40));
        tituloLabel.setHorizontalAlignment(SwingConstants.CENTER);
        tituloLabel.setForeground(Color.WHITE);

        informacionLabel = new JLabel();
        informacionLabel.setVerticalAlignment(JLabel.TOP);
        informacionLabel.setFont(fuentecargar2(30));
        informacionLabel.setOpaque(true);
        informacionLabel.setBackground(Color.BLACK);
        informacionLabel.setForeground(Color.WHITE); 
        informacionLabel.setVerticalTextPosition(getY());
        
        scrollPane = new JScrollPane(informacionLabel) {
            @Override
            protected void paintComponent(java.awt.Graphics g) {
                super.paintComponent(g);
                setBackground(Color.BLACK);
            }
        };
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.getViewport().setBackground(Color.BLACK);
        scrollPane.setOpaque(true);
        scrollPane.setBackground(Color.BLACK); 

        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.setBackground(Color.BLACK);
        centerPanel.add(tituloLabel, BorderLayout.NORTH);
        centerPanel.add(buttonPanel, BorderLayout.WEST);
        centerPanel.add(scrollPane, BorderLayout.CENTER);
        add(centerPanel, BorderLayout.CENTER);
    }

    public static Font fuentecargar(float size) {
        try {
            File fuente = new File("src\\fuente\\pixelart.ttf");

            Font font = Font.createFont(Font.TRUETYPE_FONT, fuente);

            float fontSize = size;

            font = font.deriveFont(fontSize);
            GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(font);
            return font;

        } catch (IOException | FontFormatException e) {
            Font defaultFont = new Font("Arial", Font.PLAIN, 15);
            e.printStackTrace();
            return defaultFont;
        }
    }
     
    public static Font fuentecargar2(float size) {
        try {
            File fuente = new File("src\\fuente\\Pixellari.ttf");

            Font font = Font.createFont(Font.TRUETYPE_FONT, fuente);

            float fontSize = size;

            font = font.deriveFont(fontSize);
            GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(font);
            return font;

        } catch (IOException | FontFormatException e) {
            Font defaultFont = new Font("Arial", Font.PLAIN, 15);
            e.printStackTrace();
            return defaultFont;
        }
    }
    
    private void addButton(String text) {
        JButton button = createTransparentButton(text);
        button.setFont(fuentecargar(20));
        button.addActionListener(this);
        button.setPreferredSize(new Dimension(175, 80));
        button.setFocusPainted(false);
        buttonPanel.add(button);
        underlineProgress.put(button, 0);
        underlineTimers.put(button, createUnderlineTimer(button));
    }

    private JButton createTransparentButton(String text) {
        @SuppressWarnings("serial")
		JButton button = new JButton(text) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (underlineProgress.get(this) > 0 || clickedButtons.contains(this)) {
                    Graphics2D g2d = (Graphics2D) g;
                    g2d.setColor(Color.WHITE);
                    int underlineY = getHeight() - 5;
                    int underlineWidth = underlineProgress.get(this);
                    if (clickedButtons.contains(this)) {
                        underlineWidth = getWidth();
                    }
                    g2d.drawLine(0, underlineY, underlineWidth, underlineY);
                }
            }
        };
        button.setForeground(Color.WHITE);
        button.setOpaque(false);
        button.setContentAreaFilled(false);
        button.setBorderPainted(false);
        button.setPreferredSize(new Dimension(150, 80));
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                underlineProgress.put(button, 0);
                underlineTimers.get(button).start();
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (!clickedButtons.contains(button)) {
                    underlineTimers.get(button).stop();
                    underlineProgress.put(button, 0);
                    button.repaint();
                }
            }
        });
        return button;
    }

    private Timer createUnderlineTimer(JButton button) {
        return new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int progress = underlineProgress.get(button);
                if (progress < button.getWidth()) {
                    underlineProgress.put(button, progress + 10);
                    button.repaint();
                } else {
                    ((Timer) e.getSource()).stop();
                }
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton boton = (JButton) e.getSource();
        String informacion = "";

        for (JButton clickedButton : clickedButtons) {
            underlineTimers.get(clickedButton).stop();
            underlineProgress.put(clickedButton, 0);
            clickedButton.repaint();
        }
        clickedButtons.clear();

        clickedButtons.add(boton);
        boton.repaint();

        switch (boton.getText()) {
            case "START":
                tituloLabel.setText("START");
                informacion = "<html>At the beginning of each game, vaccines are initialized.\n"
                        + "At the beginning of each game, cities are initialized.\n"
                        + "Each city can only be infected with 1 type of infection based on its ID.\n"
                        + "If there is an outbreak in the adjacent city and both cities have different \n"
                        + "types of infection, the corresponding infection type will \n"
                        + "be added.\n"
                        + "If a city has 3 infections and 1 is added, it is an outbreak. If there is an \n"
                        + "outbreak, 1 infection is added to the neighboring cities.\n"
                        + "If there are 3 connected cities, an outbreak occurs in the first city, it jumps \n"
                        + "to the second, there is also an outbreak, in the third,\n"
                        + "2 infections are added. 1 is not added to the connected cities that have had an \n"
                        + "outbreak in this chain of outbreaks.\n"
                        + "The number of infected cities at the beginning of the game is a configuration \n"
                        + "parameter.\n"
                        + "The number of infected cities each round is a configuration parameter.\n"
                        + "The number of diseases is a configuration parameter.";
                break;
            case "CITY":
                tituloLabel.setText("CITY");
                informacion = "<html>Each city has a name, X coordinate, Y coordinate, and type of disease.\n"
                        + "Each city has different infection levels.\n"
                        + "Each city stores its adjacent cities.\n"
                        + "Each city increases the infection level by +1 when it becomes infected again.\n"
                        + "In each city, if the infection level exceeds 3, the infection spreads to its \n"
                        + "adjacent cities and (+1 is added to the outbreak counter).";
                break;
            case "GAMES":
                tituloLabel.setText("GAMES");
                informacion = "<html>Round number.\n"
                        + "It will have a list with all the cities and actions that can be performed on them.\n"
                        + "It will have a list with all the vaccines and actions that can be performed on \n"
                        + "them (generate vaccine, increase%, ...).";
                break;
            case "PLAYER":
                tituloLabel.setText("PLAYER");
                informacion = "<html>The player will have 4 actions per round.\n"
                        + "Each turn, the player can create the vaccine (conduct research) or cure cities. \n"
                        + "Both cannot be done in the same turn.\n"
                        + "Curing costs 1 action and only affects one city.\n"
                        + "When conducting research, all 4 actions are spent.\n"
                        + "The disease of the chosen city can be treated.\n"
                        + "Each city has a name, X coordinate, Y coordinate, and type of disease.\n"
                        + "Each city has different infection levels.\n"
                        + "Each city stores its adjacent cities.\n"
                        + "Each city increases the infection level by +1 when it becomes infected again.\n"
                        + "In each city, if the infection level exceeds 3, the infection spreads to its adjacent \n"
                        + "cities and (+1 is added to the outbreak counter).";
                break;
            case "RESEARCH":
                tituloLabel.setText("RESEARCH");
                informacion = "<html>Every time research is conducted, the player spends 4 actions and the percentage \n"
                		+ "of the selected vaccine will increase.";
                break;
            case "VACCINE":
                tituloLabel.setText("VACCINE");
                informacion = "<html>The vaccine consists of 4 parts (1 part per research).\n"
                        + "1 vaccine per disease type.\n"
                        + "They have a name, a color, and a development percentage.\n"
                        + "If the vaccine is developed 100%, it is indicated that the development is already complete.\n"
                        + "With 1 complete vaccine, an entire city can be cured at once.";
                break;
            case "HEAL":
                tituloLabel.setText("HEAL");
                informacion = "<html>If when curing 1 infected city, a vaccine developed 100% is not available, only the infection level is reduced by 1.\n"
                        + "If when curing 1 infected city, a vaccine developed 100% is available, the infection is completely eliminated (infection level 0).";
                break;
            case "END":
                tituloLabel.setText("END");
                informacion = "<html>At the end of each round, it is checked whether the player has won, lost, or it is unknown.\n"
                        + "You win by curing all infections.\n"
                        + "If all the outbreaks occur, the game is lost.";
                break;
            case "MENU":
                setVisible(false);
                menu menu = main.menu.getInstance();
                menu.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                menu.setVisible(true);
                getParent().add(menu);

                getParent().revalidate();
                getParent().repaint();
                break;
        }

        animateText(informacion);
    }

    private void animateText(String text) {
        String[] lines = text.split("\n");
        Timer timer = new Timer(100, new ActionListener() {
            private int lineIndex = 0;
            private StringBuilder currentText = new StringBuilder("<html><div>");

            @Override
            public void actionPerformed(ActionEvent e) {
                if (lineIndex < lines.length) {
                    currentText.append(lines[lineIndex]).append("<br>");
                    informacionLabel.setText(currentText.toString());
                    lineIndex++;
                } else {
                    ((Timer) e.getSource()).stop();
                    currentText.append("</div></html>");
                    informacionLabel.setText(currentText.toString());
                }
            }
        });
        timer.start();
    }

    public static info instance;

    public static info getInstance() {
        if (instance == null) {
            instance = new info();
        }
        return instance;
    }
}
class StateManager {
    private static Class<?> previousClass;

    public static void setPreviousClass(Class<?> clazz) {
        previousClass = clazz;
    }

    public static Class<?> getPreviousClass() {
        return previousClass;
    }
}